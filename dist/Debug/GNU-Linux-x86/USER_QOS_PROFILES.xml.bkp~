<?xml version="1.0"?>
<!-- 
Description
XML QoS Profile for Monitoring

The QoS configuration of the DDS entities in the generated example is 
loaded from this file.

This file is used only when it is in the current working directory
or when the enviroment variable
NDDS_QOS_PROFILES is defined and points to this file.

For more information about XML QoS Profiles see Chapter 15 in the 
RTI Connext user manual.
-->
<dds xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
     xsi:noNamespaceSchemaLocation="G:/RTI/RTI_4.5f/ndds.4.5f/scripts/../resource/rtiddsgen/../qos_profiles_4.5f/schema/rti_dds_qos_profiles.xsd"
     version="4.5f">
    <!-- QoS Library containing the QoS profile used in the generated example.

        A QoS library is a named set of QoS profiles.
    -->
    <qos_library name="Monitoring_Library">

        <!-- QoS profile used to configure reliable communication between the DataWriter 
             and DataReader created in the example code.

             A QoS profile groups a set of related QoS.
        -->
        <qos_profile name="Monitoring_Profile" is_default_qos="true">
            <!-- QoS used to configure the data writer created in the example code -->
          <datawriter_qos>
            <liveliness>
              <!--This changes for new QOS-->
              <lease_duration>
                <sec>1</sec>
                <nanosec>0</nanosec>
              </lease_duration>
            </liveliness>
            <reliability>
              <kind>RELIABLE_RELIABILITY_QOS</kind>
              <max_blocking_time>
                <sec>60</sec>
              </max_blocking_time>
            </reliability>
            <history>
              <kind>KEEP_LAST_HISTORY_QOS</kind>
              <depth>1</depth>
            </history>
	    <durability>
              <kind>TRANSIENT_LOCAL_DURABILITY_QOS</kind>
            </durability>
            <resource_limits>
              <max_samples>50</max_samples>
            </resource_limits>
            <protocol>
              <rtps_reliable_writer>
                <min_send_window_size>50</min_send_window_size>
                <max_send_window_size>50</max_send_window_size>
              </rtps_reliable_writer>
            </protocol>
          </datawriter_qos>


          <!-- QoS used to configure the data reader created in the example code -->
          <datareader_qos>
           <liveliness>
              <!--This changes for new QOS-->
              <lease_duration>
                <sec>1</sec>
                <nanosec>0</nanosec>
              </lease_duration>
            </liveliness>
            <reliability>
              <kind>RELIABLE_RELIABILITY_QOS</kind>
              <max_blocking_time>
                <sec>60</sec>
              </max_blocking_time>
            </reliability>
            <history>
              <kind>KEEP_ALL_HISTORY_QOS</kind>
              <depth>1</depth>
            </history>
            <resource_limits>
              <max_samples>50</max_samples>
            </resource_limits>
            <protocol>
              <rtps_reliable_reader>
                <min_send_window_size>50</min_send_window_size>
                <max_send_window_size>50</max_send_window_size>
              </rtps_reliable_reader>
            </protocol>
          </datareader_qos>
          
          <participant_qos>
            <!--
                        The participant name, if it is set, will be displayed in the
                        RTI Analyzer tool, making it easier for you to tell one
                        application from another when you're debugging.
                        -->
            <participant_name>
              <name>MONITORING SYSTEM</name>
            </participant_name>

            <receiver_pool>
              <!--
                            The maximum size of a datagram that can be deserialized,
                            independent of the network transport. By default, this
                            value is 9 KB, since that is a common default maximum
                            size for UDP datagrams on some platforms. However, on
                            platforms that support larger datagrams - up to 64 KB -
                            it's a good idea to increase this limit for demanding
                            applications to avoid socket read errors.
                            -->
              <buffer_size>65536</buffer_size>
              <!-- 64 KB -->
            </receiver_pool>
            <property>
              <value>
                <!--
                                Configure UDPv4 transport:
                                -->
                <element>
                  <!--
                                    On platforms that support it, increase the maximum
                                    size of a UDP datagram to the maximum supported by
                                    the protocol: 64 KB. That will allow you to send
                                    the large packets that can result when you batch
                                    samples.
                                    -->
                  <name>dds.transport.UDPv4.builtin.parent.message_size_max</name>
                  <value>65536</value>
                  <!-- 64 KB -->
                </element>
                <element>
                  <!--
                                    If possible, increase the UDP send socket buffer
                                    size. This will allow you to send multiple large
                                    packets without UDP send errors.

                                    On some platforms (e.g. Linux), this value is
                                    limited by a system-wide policy. Setting it to
                                    a larger value will fail silently; the value will
                                    be set to the maximum allowed by that policy.
                                    -->
                  <name>dds.transport.UDPv4.builtin.send_socket_buffer_size</name>
                  <value>524288</value>
                  <!-- 512 KB -->
                </element>
                <element>
                  <!--
                                    If possible, increase the UDP receive socket
                                    buffer size. This will allow you to receive
                                    multiple large packets without UDP receive errors.

                                    On some platforms (e.g. Linux), this value is
                                    limited by a system-wide policy. Setting it to
                                    a larger value will fail silently; the value will
                                    be set to the maximum allowed by that policy.
                                    -->
                  <name>dds.transport.UDPv4.builtin.recv_socket_buffer_size</name>
                  <value>2097152</value>
                  <!-- 2 MB -->
                </element>
                <!--
                                Configure shared memory transport:
                                -->
                <element>
                  <!--
                                    Set the shared memory maximum message size to the
                                    same value that was set for UDP.
                                    -->
                  <name>dds.transport.shmem.builtin.parent.message_size_max</name>
                  <value>65536</value>
                  <!-- 64 KB -->
                </element>
                <element>
                  <!--
                                    Set the size of the shared memory transport's
                                    receive buffer to some large value.
                                    -->
                  <name>dds.transport.shmem.builtin.receive_buffer_size</name>
                  <value>2097152</value>
                  <!-- 2 MB -->
                </element>
                <element>
                  <!--
                                    Set the maximum number of messages that the shared
                                    memory transport can cache while waiting for them
                                    to be read and deserialized.
                                    -->
                  <name>dds.transport.shmem.builtin.received_message_count_max</name>
                  <value>2048</value>
                </element>
                <!--
                                Increase the size of the string built-in size. This
                                configuration is only necessary for applications that
                                use the built-in types (such as Hello_builtin).
                                -->
                <element>
                  <name>dds.builtin_type.string.max_size</name>
                  <value>2048</value>
                </element>
              </value>
            </property>


          </participant_qos>
        </qos_profile>        
    </qos_library>
</dds>
